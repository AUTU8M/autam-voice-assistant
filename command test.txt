 flutter create autam --org com.autumn.autam




 import 'dart:convert';

import 'package:autam/secrets.dart';
import 'package:http/http.dart' as http;

class OpenaiService {
  final List<Map<String, String>> messages = [];
  
  Future<String> isArtPromtAPI(String prompt) async {
    try {
      final res = await http.post(
        Uri.parse('https://api.openai.com/v1/chat/completions'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $openAiApikey',
        },
        body: jsonEncode({
          "model": "gpt-4o",
          "messages": [
            {
              'role': 'user',
              'content':
                  'Does this message want to generate an Ai picture, image, art or anything similar? $prompt . Simply answer with a yes or no',
            },
          ],
        }),
      );
      
      print('isArtPromtAPI response: ${res.body}');
      
      if (res.statusCode == 200) {
        String content =
            jsonDecode(res.body)['choices'][0]['message']['content'];
        content = content.trim();

        print('Content detected: $content');
        
        switch (content.toLowerCase()) {
          case 'yes':
          case 'yes.':
            final res = await dallEAPI(prompt);  // Fixed: Should call dallE for "yes"
            return res;
          default:
            final res = await chatGPTAPI(prompt); // Fixed: Should call chatGPT for "no"
            return res;
        }
      }
      return 'An internal error occurred: Status code ${res.statusCode}';
    } catch (e) {
      print('Error in isArtPromtAPI: $e');
      return e.toString();
    }
  }

  Future<String> chatGPTAPI(String prompt) async {
    messages.add({'role': 'user', 'content': prompt});
    try {
      final res = await http.post(
        Uri.parse('https://api.openai.com/v1/chat/completions'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $openAiApikey',
        },
        body: jsonEncode({
          "model": "gpt-4o", 
          "messages": messages,
        }),
      );

      print('chatGPTAPI response status: ${res.statusCode}');
      print('chatGPTAPI response body: ${res.body}');
      
      if (res.statusCode == 200) {
        String content =
            jsonDecode(res.body)['choices'][0]['message']['content'];
        content = content.trim();

        messages.add({'role': 'assistant', 'content': content});
        return content;
      }
      return 'An internal error occurred: Status code ${res.statusCode}';
    } catch (e) {
      print('Error in chatGPTAPI: $e');
      return e.toString();
    }
  }

  Future<String> dallEAPI(String prompt) async {
    try {
      final res = await http.post(
        Uri.parse('https://api.openai.com/v1/images/generations'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $openAiApikey',
        },
        body: jsonEncode({
          'model': 'dall-e-3',  // Added model specification
          'prompt': prompt, 
          'n': 1,
          'size': '1024x1024',  // Added default size
        }),
      );

      print('dallEAPI response status: ${res.statusCode}');
      print('dallEAPI response body: ${res.body}');
      
      if (res.statusCode == 200) {
        String imageUrl = jsonDecode(res.body)['data'][0]['url'];
        imageUrl = imageUrl.trim();

        messages.add({'role': 'assistant', 'content': imageUrl});
        return imageUrl;
      }
      return 'An internal error occurred: Status code ${res.statusCode}';
    } catch (e) {
      print('Error in dallEAPI: $e');
      return e.toString();
    }
  }
}































import 'dart:convert';

import 'package:autam/secrets.dart';
import 'package:http/http.dart' as http;

class OpenaiService {
  final List<Map<String, String>> messages = [];
  Future<String> isArtPromtAPI(String prompt) async {
    try {
      final res = await http.post(
        Uri.parse('https://api.openai.com/v1/chat/completions'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $openAiApikey',
        },
        body: {
          jsonEncode({
            "model": "gpt-4o",
            "messages": [
              {
                'role': 'user',
                'content':
                    'Does this message want to generate an Ai picture, image, art or anything similar? $prompt . Simply answer with a yes or no',
              },
            ],
          }),
        },
      );
      print(res.body);
      if (res.statusCode == 200) {
        String content =
            jsonDecode(res.body)['choices'][0]['message']['content'];
        content.trim();

        switch (content) {
          case 'Yes':
          case 'yes':
          case 'yes.':
          case 'Yes.':
          case 'YES':
            final res = await chatGPTAPI(prompt);
            return res;
          default:
            final res = await dallEAPI(prompt);
            return res;
        }
      }
      return 'An internal error occurred';
    } catch (e) {
      return e.toString();
    }
  }

  Future<String> chatGPTAPI(String prompt) async {
    messages.add({'role': 'user', 'content': prompt});
    try {
      final res = await http.post(
        Uri.parse('https://api.openai.com/v1/chat/completions'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $openAiApikey',
        },
        body: {
          jsonEncode({"model": "gpt-4o", "messages": messages}),
        },
      );

      if (res.statusCode == 200) {
        String content =
            jsonDecode(res.body)['choices'][0]['message']['content'];
        content = content.trim();

        messages.add({'role': 'assistant', 'content': content});
        return content;
      }
      return 'An internal error occurred';
    } catch (e) {
      return e.toString();
    }
  }

  Future<String> dallEAPI(String prompt) async {
    messages.add({'role': 'user', 'content': prompt});
    try {
      final res = await http.post(
        Uri.parse('https://api.openai.com/v1/images/generations'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $openAiApikey',
        },
        body: {
          jsonEncode({'prompt': prompt, 'n': 1}),
        },
      );

      if (res.statusCode == 200) {
        String imageUrl = jsonDecode(res.body)['data'][0]['url'];
        imageUrl = imageUrl.trim();

        messages.add({'role': 'assistant', 'content': imageUrl});
        return imageUrl;
      }
      return 'An internal error occurred';
    } catch (e) {
      return e.toString();
    }
  }
}
